// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: groups.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name, description, user_id)
VALUES ($1, $2, $3)
RETURNING id, name, user_id, description, created_at, updated_at, deleted_at
`

type CreateGroupParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	UserID      pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.Description, arg.UserID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createGroupAdmin = `-- name: CreateGroupAdmin :one
INSERT INTO group_admins (group_id, member_id)
VALUES ($1, $2)
RETURNING id, group_id, member_id, created_at, updated_at, deleted_at
`

type CreateGroupAdminParams struct {
	GroupID  int64 `json:"group_id"`
	MemberID int64 `json:"member_id"`
}

func (q *Queries) CreateGroupAdmin(ctx context.Context, arg CreateGroupAdminParams) (GroupAdmin, error) {
	row := q.db.QueryRow(ctx, createGroupAdmin, arg.GroupID, arg.MemberID)
	var i GroupAdmin
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserGrops = `-- name: GetUserGrops :many
WITH user_group_membership AS (
    SELECT id AS member_id, group_id FROM members WHERE members.user_id = $1
)
SELECT g.id, g.name, g.user_id, g.description, g.created_at, g.updated_at, g.deleted_at FROM user_group_membership ugm
JOIN group_admins ga ON ga.group_id = ugm.group_id AND ga.member_id = ugm.member_id
JOIN groups g ON ga.group_id = g.id
LIMIT $2
`

type GetUserGropsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) GetUserGrops(ctx context.Context, arg GetUserGropsParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getUserGrops, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isGroupAdmin = `-- name: IsGroupAdmin :one
SELECT EXISTS(
    SELECT 1 FROM group_admins
    WHERE member_id = $1 AND group_id = $2
) AS is_admin
`

type IsGroupAdminParams struct {
	MemberID int64 `json:"member_id"`
	GroupID  int64 `json:"group_id"`
}

func (q *Queries) IsGroupAdmin(ctx context.Context, arg IsGroupAdminParams) (bool, error) {
	row := q.db.QueryRow(ctx, isGroupAdmin, arg.MemberID, arg.GroupID)
	var is_admin bool
	err := row.Scan(&is_admin)
	return is_admin, err
}
